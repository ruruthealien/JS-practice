1. approach one
document.getElementById('owl').onclick = function(){
    alter("owl is clicked")
}
2. second approach
document.getElementById('owl').addEventListener('click', function(){
    alter("owl is clicked")
})
// attachEvent()
// jQuery - on

document.getElementById('owl').addEventListener('click', function(){

}, false)

// need to know: type, timestap,defaultPrevented
// target, toElement, srcElement, currentTarget,
// clientX, clientY, screenX, screenY
// altkey, ctrlkey, shiftkey, keyCode

document.getElementById('images').addEventListener('click', function(e){
    console.log(" clicked inside ul")
}, false)

document.getElementById('owl').addEventListener('click', function(e){
    console.log("owl clicked")
}, false)

// elemnt is selected and actioned by bubbling method, first the inner element respond then the outer element

// capturing mode: replace false -> true then the outer element will respond first then the inner element

document.getElementById('owl').addEventListener('click', function(e){
    console.log("owl clicked")
    e.stopPropagation();
}, false)

// this method will stop the propagation and will end there, it will not go in the outer element

document.getElementById('google').addEventListenerI('click', function(e){
    e.preventDefault();
    console.log("google is clicked");
    e.stopPropagation();
}, false)

document.querrySelector('#images').addEventListener('click', function(e){
    // console.log(e.target.parentNode);
    console.log(e.target.tagName);

    if(e.target.tagName === 'IMG')
    {
        console.log(e.target.id);
        let removeImage = e.target.parentNode
        removeImage.remove();
    
    }
    
     // removeImage.parentNode.removeChild(removeImage)

}, false)